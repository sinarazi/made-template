pipeline TrainTransportPipeline
{
    TrainTransportExtractor
        -> TrainTransportTextFileInterpreter
        -> TrainTransportCSVInterpreter 
        -> TrainTransportRowDeleter
        -> TrainTransportSelector
        -> TransportedGetreideHeaderWriter
        -> TransportedHeadRenamer
        -> TrainTransportTableInterpreter
        -> TrainTransportLoader;

    block TrainTransportExtractor oftype HttpExtractor    
    {
        // direct link to CSV
        url: "https://www-genesis.destatis.de/genesis/downloads/00/tables/46131-0014_00.csv";
    }

    // Remove metadata rows
    block TrainTransportRowDeleter oftype RowDeleter
    {
        delete: [row 1, row 2, row 3, row 4, row 5, row 6];
    }

    // Ensure German umlauts are saved correctly
    block TrainTransportTextFileInterpreter oftype TextFileInterpreter { encoding: "latin3";}

    block TrainTransportCSVInterpreter oftype CSVInterpreter 
    {
        delimiter: ";";
    }
    
    // Select only a subset of columns
    block TrainTransportSelector oftype CellRangeSelector
    {
        select: range A1:AU*;
    }

    // Add header names for the first columns A-E
    block TransportedGetreideHeaderWriter oftype CellWriter
    {
        at: range A1:E1;
        // New names: 'year', 'month', 'goods_id', 'goods_name', 'goods_source'
        write: ["year", "month", "goods_id", "goods_name", "goods_source"];
    }


    // Rename headers for the quantity columns AT-AU
    block TransportedHeadRenamer oftype CellWriter
    {
        at: range AT1:AU1;
        // New names: 'abroad', 'total'
        write: [ "abroad", "total"];
    }
  
    // Choose suitable value types for all columns

        // Numeric values must be positive integers
    valuetype PositiveNumCons oftype integer {
        constraints: [PositiveNum];
    }

    constraint PositiveNum oftype RangeConstraint{
        lowerBound: 0;
        lowerBoundInclusive:true;
    }

        // 'month' must be a German month, capitalized
    valuetype MonthCapitalConst oftype text {
        constraints: [GermanMonthConsrtraint];
    }
    constraint GermanMonthConsrtraint oftype AllowlistConstraint {
        allowlist:['Januar','Februar','MÃ¤rz','April','Mai','Juni','Juli','August','September','Oktober','November','Dezember'];
    }

        // 'goods_id' must start with NST7-, followed by three numbers or capital letters
    valuetype goods_idConst oftype text
    {
        constraints: [goods_id_NST7];
    }
        // Drop rows with missing or invalid values
    constraint goods_id_NST7 oftype RegexConstraint
    {
        regex: /^NST7-[A-Z0-9]{3}$/;
    }

        // Choose suitable value types for all columns
    block TrainTransportTableInterpreter oftype TableInterpreter 
    {
        header: true;
        columns: [
            "year" oftype PositiveNumCons,
            "month" oftype MonthCapitalConst,
            "goods_id" oftype goods_idConst,
            "goods_name" oftype text,
            "goods_source" oftype text, 
            "abroad" oftype PositiveNumCons,
            "total" oftype PositiveNumCons,  
        ];
    }

    block TrainTransportLoader oftype SQLiteLoader {
        table: "goods";
        file: "goodsTransportedByTrain.sqlite";
    }
}