pipeline GTFSPipeline {
    GTFSExtractor
        -> GTFSFilePicker
        -> GTFSTextFileInterpreter
        -> GTFSCsvInterpreter
        -> GTFSTableInterpreter
        -> GTFSLoader;

    // Extract file from url
    block GTFSExtractor oftype GTFSExtractor {
    url:"https://gtfs.rhoenenergie-bus.de/GTFS.zip";
    }
    // Use a file FilePicker block with a path for an existing file
    // Pick out only stops (from stops.txt)
    block GTFSFilePicker oftype FilePicker {
        path: "/stops.txt";
    }

    // maintain german umlauts
    block GTFSTextFileInterpreter oftype TextFileInterpreter {
        encoding: "utf8";
    }

    // prepration of the csv file
    block GTFSCsvInterpreter oftype CSVInterpreter {
        delimiter: ',';
        enclosingEscape: '"';
        enclosing: '"'; 
    }

    // Only the columns stop_id, stop_name, stop_lat, stop_lon, zone_id with fitting data types
    block GTFSTableInterpreter oftype TableInterpreter {
        header: true;
        columns: [
            "stop_id" oftype integer,
            "stop_name" oftype text,
            "stop_lat" oftype GeoCoordinateRange,
            "stop_lon" oftype GeoCoordinateRange,
            "zone_id" oftype ZoneConstratin,
        ];
    }
    // Filter data
    // Only keep stops from zone 1645
    valuetype ZoneConstratin oftype integer{
        constraints: [ZoneIDConstraint];
    }

    constraint ZoneIDConstraint on integer:
        value == 1645;

    // Validate data
    valuetype GeoCoordinateRange oftype decimal {
        constraints: [GeoCoordinate];
        }
    // stop_lat/stop_lon must be a geographic coordinates between -90 and 90, including upper/lower bounds
    constraint GeoCoordinate oftype RangeConstraint {
        lowerBound: -90;
        lowerBoundInclusive: true;
        upperBound: 90;
        upperBoundInclusive: true;
        }

    // save data
    block GTFSLoader oftype SQLiteLoader {
        table: "stops";
        file: "gtfs.sqlite";
    }
}